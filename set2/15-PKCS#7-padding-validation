#!/usr/bin/python

# PKCS#7 padding validation
# Write a function that takes a plaintext, determines if it has valid PKCS#7 padding, and strips the padding off.
# 
# The string:
# 
# "ICE ICE BABY\x04\x04\x04\x04"
# ... has valid padding, and produces the result "ICE ICE BABY".
# 
# The string:
# 
# "ICE ICE BABY\x05\x05\x05\x05"
# ... does not have valid padding, nor does:
# 
# "ICE ICE BABY\x01\x02\x03\x04"
# If you are writing in a language with exceptions, like Python or Ruby, make your function throw an exception on bad padding.
# 
# Crypto nerds know where we're going with this. Bear with us.

def unpad(s):
	lastChar = s[-1:]
	for i in range(-ord(lastChar), -1):
		if s[i:i+1] != lastChar:
			raise Exception("PKCS#7 padding error")
	return s[:-ord(lastChar)]


assert unpad("ICE ICE BABY" + "\x01" *  1) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x02" *  2) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x03" *  3) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x04" *  4) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x05" *  5) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x06" *  6) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x07" *  7) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x08" *  8) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x09" *  9) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x0a" * 10) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x0b" * 11) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x0c" * 12) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x0d" * 13) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x0e" * 14) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x0f" * 15) == "ICE ICE BABY"
assert unpad("ICE ICE BABY" + "\x10" * 16) == "ICE ICE BABY"

try:
	unpad("ICE ICE BABY\x05\x05\x05\x05")
	raise AssertionError("PKCS#7 padding error")
except Exception:
	pass

try:
	unpad("ICE ICE BABY\x01\x02\x03\x04")
	raise AssertionError("PKCS#7 padding error")
except Exception:
	pass

